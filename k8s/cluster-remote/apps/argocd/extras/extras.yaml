---
apiVersion: externaldns.k8s.io/v1alpha1
kind: DNSEndpoint
metadata:
  name: argocd-server-dns
  namespace: argocd
  annotations:
    external-dns.alpha.kubernetes.io/target: "argocd.${SECRET_DOMAIN}"
spec:
  endpoints:
    - dnsName: "argocd.${SECRET_DOMAIN}"
      recordType: CNAME
      targets: ["ingress.${SECRET_DOMAIN}"]
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: "argocd-server-tls"
  namespace: argocd
  labels:
    use-cloudflare-solver: "true"
spec:
  secretName: "argocd-server-tls"
  secretTemplate:
    labels:
      use-cloudflare-solver: "true"
  issuerRef:
    name: letsencrypt-production
    kind: ClusterIssuer
  commonName: "argocd.${SECRET_DOMAIN}"
  dnsNames:
    - "argocd.${SECRET_DOMAIN}"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    # If you encounter a redirect loop or are getting a 307 response code
    # then you need to force the nginx ingress to connect to the backend using HTTPS.
    #
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  ingressClassName: external
  rules:
    - host: &host "argocd.${SECRET_DOMAIN}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                port:
                  name: https
  tls:
    - hosts:
        - *host
      secretName: argocd-server-tls
