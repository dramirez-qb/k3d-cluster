---
version: "3"

vars:
  PYTHON_BIN: python3
  KUBERNETES_DIR: "{{.ROOT_DIR}}/k8s"

env:
  SOPS_AGE_KEY_FILE: "{{.ROOT_DIR}}/age.key"
  PATH: "{{.ROOT_DIR}}/.venv/bin:$PATH"
  VIRTUAL_ENV: "{{.ROOT_DIR}}/.venv"
  SHARED_PATH: "{{.ROOT_DIR}}/k3s-nodes-shared"
  TASK_TEMP_DIR: "{{.HOME}}/.task-temp"
  USER_BIN_DIR: "{{.HOME}}/.local/bin"

includes:
  cluster:
    taskfile: .taskfiles/ClusterTasks.yaml
    aliases: [c]
  provision:
    taskfile: .taskfiles/ProvisionClusterTasks.yaml
    aliases: [p]

tasks:
  default: task -l

  init:
    desc: Initialize configuration files
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        mkdir -p {{.USER_BIN_DIR}} {{.TASK_TEMP_DIR}}
        curl -sSLO  https://github.com/jqlang/jq/releases/download/jq-1.6/jq-linux64
        install -m 0755 jq-linux64 {{.USER_BIN_DIR}}/jq && rm -f jq-linux64
      - task: install:direnv
      - "{{.USER_BIN_DIR}}/direnv allow ."
      - "{{.USER_BIN_DIR}}/direnv reload"
    status:
      - test -d {{.USER_BIN_DIR}}/
      - test -f {{.USER_BIN_DIR}}/jq
      - test -f {{.USER_BIN_DIR}}/direnv

  install:python-virtual-env:
    desc: Create a Python virtual env and install required packages
    aliases: [venv]
    cmds:
      - "{{.PYTHON_BIN}} -m venv {{.ROOT_DIR}}/.venv"
      - .venv/bin/python3 -m pip install --upgrade pip setuptools wheel

  install:docker:
    run: once
    desc: Install docker-ce jq gettext
    aliases: [docker]
    dir: "{{.TASK_TEMP_DIR}}"
    prompt: This is will add the docker repo to your system... Do you want to continue?
    cmds:
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc
      - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" -y
      - sudo apt-get update -qq -y
      - sudo apt-get install docker-ce jq gettext wget curl age -y
      - sudo usermod -aG docker $(whoami)
    status:
      - test -f /etc/apt/trusted.gpg.d/docker.asc
      - test -f /bin/jq
      - test -f /bin/envsubst

  install:direnv:
    desc: Install direnv binary
    aliases: [direnv]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        DIRENV_VERSION=$(curl -sL https://api.github.com/repos/direnv/direnv/releases/latest | {{.USER_BIN_DIR}}/jq -r ".tag_name")
        curl -sSLO https://github.com/direnv/direnv/releases/download/${DIRENV_VERSION}/direnv.linux-amd64
        install -m 0755 direnv.linux-amd64 {{.USER_BIN_DIR}}/direnv && rm -f direnv.linux-amd64
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/direnv

  install:kubectl:
    desc: Install kubectl binary
    aliases: [kubectl]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        curl -sSLO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        install -m 0755 kubectl {{.USER_BIN_DIR}}/kubectl && rm -f kubectl
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/kubectl

  install:k3d:
    desc: Install k3d binary
    aliases: [k3d]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        K3D_VERSION=$(curl -sL https://api.github.com/repos/k3d-io/k3d/releases/latest | jq -r ".tag_name")
        curl -sSLO https://github.com/k3d-io/k3d/releases/download/${K3D_VERSION}/k3d-linux-amd64
        install -m 0755 k3d-linux-amd64 {{.USER_BIN_DIR}}/k3d && rm -f k3d-linux-amd64
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/k3d

  install:flux:
    desc: Install flux binary
    aliases: [flux]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        FLUX_VERSION=$(curl -sL https://api.github.com/repos/fluxcd/flux2/releases/latest | jq -r ".tag_name")
        curl -sSLO https://github.com/fluxcd/flux2/releases/download/${FLUX_VERSION}/flux_${FLUX_VERSION/v/}_linux_amd64.tar.gz
        tar xf flux_${FLUX_VERSION/v/}_linux_amd64.tar.gz
        install -m 0755 flux {{.USER_BIN_DIR}}/flux && rm -f flux flux_${FLUX_VERSION/v/}_linux_amd64.tar.gz
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/flux

  install:age:
    desc: Install age binary
    aliases: [age]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        AGE_VERSION=$(curl -sL https://api.github.com/repos/FiloSottile/age/releases/latest | jq -r ".tag_name")
        curl -sSLO https://github.com/FiloSottile/age/releases/download/${AGE_VERSION}/age-${AGE_VERSION}-linux-amd64.tar.gz
        tar xf age-${AGE_VERSION}-linux-amd64.tar.gz
        install -m 0755 age/age {{.USER_BIN_DIR}}/age && rm -rf age*
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/age

  install:sops:
    desc: Install sops binary
    aliases: [sops]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        SOPS_VERSION=$(curl -sL https://api.github.com/repos/getsops/sops/releases/latest | jq -r ".tag_name")
        curl -sSLO https://github.com/getsops/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux.amd64
        install -m 0755 sops-${SOPS_VERSION}.linux.amd64 {{.USER_BIN_DIR}}/sops && rm -f sops-${SOPS_VERSION}.linux.amd64
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/sops

  install:cloudflared:
    desc: Install cloudflared binary
    aliases: [cloudflared]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        CLOUDFLARED_VERSION=$(curl -sL https://api.github.com/repos/cloudflare/cloudflared/releases/latest | jq -r ".tag_name")
        curl -sSLO https://github.com/cloudflare/cloudflared/releases/download/${CLOUDFLARED_VERSION}/cloudflared-linux-amd64
        install -m 0755 cloudflared-linux-amd64 {{.USER_BIN_DIR}}/cloudflared && rm -f cloudflared-linux-amd64
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/cloudflared

  install:devspace:
    desc: Install devspace binary
    aliases: [devspace]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        curl -sSL -o devspace "https://github.com/loft-sh/devspace/releases/latest/download/devspace-linux-amd64"
        install -c -m 0755 devspace {{.USER_BIN_DIR}}/devspace && rm -f devspace
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/devspace

  install:vcluster:
    desc: Install vcluster binary
    aliases: [vcluster]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        curl -sSL -o vcluster "https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64"
        install -c -m 0755 vcluster {{.USER_BIN_DIR}}/vcluster && rm -f vcluster
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/vcluster

  install:argocd:
    desc: Install argocd binary
    aliases: [argocd]
    dir: "{{.TASK_TEMP_DIR}}"
    cmds:
      - |
        curl -sSL -o argocd "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
        install -c -m 0755 argocd {{.USER_BIN_DIR}}/argocd && rm -f argocd
    preconditions:
      - test -d {{.USER_BIN_DIR}}/
    status:
      - test -f {{.USER_BIN_DIR}}/argocd

  install:tools:
    desc: Install all the tools
    aliases: [tools]
    deps: [init]
    cmds:
      - task: install:age
      - task: install:argocd
      - task: install:direnv
      - task: install:flux
      - task: install:k3d
      - task: install:kubectl
      - task: install:sops

  install:devtools:
    desc: Install all the dev tools
    aliases: [devtools]
    deps: [init]
    cmds:
      - task: install:tools
      - task: install:devspace
      - task: install:vcluster

  all:
    desc: Install everything
    cmds:
      - task: install:tools
      - task: provision:all
