---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  KUBERNETES_DIR: "{{.ROOT_DIR}}/kubernetes"

tasks:
  create:
    desc: Install a K3d cluster
    aliases: [c, init]
    cmds:
      - cmd: echo -e "\\033[1;32mCreating cluster ${CLUSTER_NAME} with ${SHARED_PATH} as a shared path\\033[0;39m"
        silent: true
      - cmd: mkdir -p ${SHARED_PATH}/default-local-pv
        silent: true
      - cmd: envsubst < {{.ROOT_DIR}}/k3d-config.yaml | cat > {{.TASK_TEMP_DIR}}/k3d-config.yaml
        silent: true
      - cmd: k3d cluster create -c {{.TASK_TEMP_DIR}}/k3d-config.yaml
        silent: true
    status:
      - "k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1"

  destroy:
    desc: Destroy the K3d cluster
    aliases: [clean, d, nuke, purge, remove]
    prompt: This is will destroy the k3d cluster... Do you want to continue?
    interactive: true
    cmds:
      - cmd: echo -e "\\033[1;32mDeleting cluster ${CLUSTER_NAME}\\033[0;39m"
        silent: true
      - k3d cluster delete ${CLUSTER_NAME}

  install:flux:
    desc: Install Flux into your cluster
    aliases: [flux]
    cmds:
      - cmd: |
          export GLOBAL_CIDR_RANGE=`docker network inspect k3d-${CLUSTER_NAME} | jq '.[0].IPAM.Config[0].Subnet'| tr -d '"'`
          export START_RANGE=`echo ${GLOBAL_CIDR_RANGE} |sed 's/0\/.*/200/g'`
          export END_RANGE=`echo ${GLOBAL_CIDR_RANGE}  |sed 's/0\/.*/254/g'`
          kubectl get configmap --namespace kube-system kubevip > /dev/null 2>&1 || kubectl create configmap --namespace kube-system kubevip --from-literal range-global=${START_RANGE}-${END_RANGE} --from-literal cidr-global=${START_RANGE}/30
          kubectl apply -f https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.67.1/stripped-down-crds.yaml
          kubectl apply --kustomize {{.KUBERNETES_DIR}}/bootstrap
          cat {{.SOPS_AGE_KEY_FILE}} | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin || true
          sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml | kubectl apply -f -
          envsubst < {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml | kubectl apply -f -
          kubectl apply --kustomize {{.KUBERNETES_DIR}}/flux/config
          kubectl apply --kustomize {{.KUBERNETES_DIR}}/cluster-common
    preconditions:
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: |
          Age key file is not found. Did you forget to create it?
    status:
      - "kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/helm-controller"
      - "kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/image-automation-controller"
      - "kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/image-reflector-controller"
      - "kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/kustomize-controller"
      - "kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/notification-controller"
      - "kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/source-controller"
      - 'kubectl -n flux-system get gitrepositories home-kubernetes -o jsonpath="{.status.artifact.revision}" | grep master'
      - 'kubectl -n flux-system get kustomizations cluster-common-apps -o jsonpath="{.status.artifact.revision}" | grep master'

  install:flux-home:
    desc: Install Flux files into your Home cluster
    aliases: [flux-home]
    deps: [install:flux]
    cmds:
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/cluster-home
    status:
      - 'kubectl -n flux-system get gitrepositories home-kubernetes -o jsonpath="{.status.artifact.revision}" | grep master'
      - 'kubectl -n flux-system get kustomizations cluster-home-apps -o jsonpath="{.status.artifact.revision}" | grep master'

  create:vcluster:
    desc: Create a vcluster into your cluster
    aliases: [cvcluster, vc]
    deps: [create]
    cmds:
      - cmd: echo -e "\\033[1;32mCreating a vcluster\\033[0;39m"
        silent: true
      - cmd: |
          export VCLUSTER_NAME={{(split " " .CLI_ARGS)._0}}
          export SECRET_DOMAIN=$(sops --decrypt --extract '["stringData"]["SECRET_DOMAIN"]' {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml)
          envsubst < {{.KUBERNETES_DIR}}/vcluster-config.yaml | cat > {{.TASK_TEMP_DIR}}/vcluster-${VCLUSTER_NAME}-config.yaml
          (vcluster list | grep $VCLUSTER_NAME > /dev/null 2>&1) || vcluster create $VCLUSTER_NAME -n vcluster-$VCLUSTER_NAME --connect=false --upgrade --expose -f {{.TASK_TEMP_DIR}}/vcluster-${VCLUSTER_NAME}-config.yaml
          kubectl wait --for=condition=ready pod -l app=vcluster -l release=${VCLUSTER_NAME} -n vcluster-${VCLUSTER_NAME} --timeout=120s && \
          kubectl wait --for=condition=ready pod -l vcluster.loft.sh/managed-by=${VCLUSTER_NAME} -l vcluster.loft.sh/namespace=kube-system -n vcluster-${VCLUSTER_NAME} --timeout=120s && \
          echo "Waiting 5s" && sleep 5s && \
          kubectl -n vcluster-${VCLUSTER_NAME} get secret vc-${VCLUSTER_NAME} -ojsonpath="{.data.config}" | base64 --decode  > vcluster-${VCLUSTER_NAME}.kubeconfig
          # envsubst < {{.KUBERNETES_DIR}}/vcluster-ingress.yaml | kubectl apply -f -
          vcluster connect $VCLUSTER_NAME --namespace vcluster-$VCLUSTER_NAME
        silent: true
    preconditions:
      - test -f {{.USER_BIN_DIR}}/vcluster
      - sh: "vcluster disconnect || true"

  full-fresh-start:
    desc: Deletes and creates a new cluster
    aliases: [fresh-start, ffs]
    cmds:
      - git stash
      - git pull
      - git stash apply
      - task: destroy
      - task: create
    preconditions:
      - sh: test -f $(which git)
        msg: |
          We need git for this. Did you forget it?

  full-fresh-start-with-flux:
    desc: Deletes and creates a new cluster with Flux
    aliases: [fresh-flux, fff]
    cmds:
      - task: fresh-start
      - task: install:flux
