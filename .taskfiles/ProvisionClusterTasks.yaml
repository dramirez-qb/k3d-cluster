---
version: "3"

tasks:

  create:
    desc: Install a K3d cluster
    aliases: [c, init]
    cmds:
      - cmd: echo -e "\\033[1;32mCreating cluster ${CLUSTER_NAME} with ${SHARED_PATH} as a shared path\\033[0;39m"
        silent: true
      - cmd: mkdir -p ${SHARED_PATH}
        silent: true
      - cmd: envsubst < k3d-config.yaml | cat > /tmp/k3d-config.yaml
        silent: true
      - cmd: k3d cluster create -c /tmp/k3d-config.yaml
        silent: true
    status:
      - 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  destroy:
    desc: Destroy the K3d cluster
    aliases: [clean, d, nuke, purge, remove]
    prompt: This is will destroy the k3d cluster... Do you want to continue?
    interactive: true
    cmds:
      - cmd: echo -e "\\033[1;32mDeleting cluster ${CLUSTER_NAME}\\033[0;39m"
        silent: true
      - k3d cluster delete ${CLUSTER_NAME}

  install:storage:
    desc: Install local-path-storage into your cluster
    aliases: [storage]
    cmds:
      - cmd: echo -e "\\033[1;32mInstalling local-path-storage\\033[0;39m"
        silent: true
      - kubectl apply -f {{.KUBERNETES_DIR}}/00_local-path-storage.yaml
    status:
      - 'kubectl -n local-path-storage wait --for condition=available --timeout=90s deploy local-path-provisioner'
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:kube-vip:
    desc: Install kube-vip into your cluster
    aliases: [kube-vip]
    cmds:
      - cmd: echo -e "\\033[1;32mInstalling kube-vip\\033[0;39m"
        silent: true
      - cmd: |
          export GLOBAL_CIDR_RANGE=`docker network inspect k3d-${CLUSTER_NAME} | jq '.[0].IPAM.Config[0].Subnet'| tr -d '"'`
          export START_RANGE=`echo ${GLOBAL_CIDR_RANGE} |sed 's/0\/.*/200/g'`
          export END_RANGE=`echo ${GLOBAL_CIDR_RANGE}  |sed 's/0\/.*/254/g'`
          kubectl apply -f https://raw.githubusercontent.com/kube-vip/kube-vip-cloud-provider/main/manifest/kube-vip-cloud-controller.yaml
          kubectl create configmap --namespace kube-system kubevip --from-literal range-global=${START_RANGE}-${END_RANGE} || exit 0
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:cert-manager:
    desc: Install cert-manager into your cluster
    aliases: [cert-manager, cm]
    cmds:
      - cmd: echo -e "\\033[1;32mInstalling cert-manager\\033[0;39m"
        silent: true
      - cmd: |
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.9.1/cert-manager.yaml
          kubectl -n cert-manager wait --for condition=available --timeout=90s deploy -lapp.kubernetes.io/instance=cert-manager
          envsubst < {{.KUBERNETES_DIR}}/02_certmanager-resources.yaml | kubectl apply -f -
        silent: true
    status:
      - 'kubectl -n cert-manager wait --for condition=available --timeout=90s deploy -lapp.kubernetes.io/instance=cert-manager'
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:metallb:
    desc: Install metallb into your cluster
    aliases: [metallb, mlb]
    cmds:
      - cmd: echo -e "\\033[1;32mInstalling metallb\\033[0;39m"
        silent: true
      - cmd: |
          export CIDR_RANGE=$(docker network inspect k3d-${CLUSTER_NAME} | jq '.[0].IPAM.Config[0].Subnet'|sed 's/0/200/g'| tr -d '"')
          export START_RANGE=$(echo ${CIDR_RANGE}  |sed 's/200\/.*/240/g')
          export END_RANGE=$(echo ${CIDR_RANGE}  |sed 's/200\/.*/254/g')
          envsubst < {{.KUBERNETES_DIR}}/01_metallb.yaml | kubectl apply -f -
          kubectl get secret -n metallb-system memberlist > /dev/null 2>&1 || kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(shell openssl rand -base64 128)" > /dev/null 2>&1
          kubectl -n metallb-system wait --for condition=available --timeout=120s deployment.apps/controller
          kubectl -n metallb-system wait --for=jsonpath='{.status.numberMisscheduled}'=0 --timeout=120s daemonset.apps/speaker
          envsubst < {{.KUBERNETES_DIR}}/01_metallb_resources.yaml | kubectl apply -f -
        silent: true
    status:
      - "kubectl -n metallb-system wait --for=jsonpath='{.status.numberMisscheduled}'=0 --timeout=120s daemonset.apps/speaker"
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:loadbalancer:
    desc: Install traefik into your cluster
    aliases: [loadbalancer, lb]
    deps: [install:metallb]
    cmds:
      - cmd: echo -e "\\033[1;32mInstalling traefik\\033[0;39m"
        silent: true
      - cmd: |
          kubectl apply -f {{.KUBERNETES_DIR}}/03_traefik/00_traefik_crd.yml
          envsubst < {{.KUBERNETES_DIR}}/03_traefik/01_traefik_workload.yaml | cat > /tmp/01_traefik_workload.yaml
          kubectl apply -f /tmp/01_traefik_workload.yaml
        silent: true
    status:
      - 'kubectl -n infrastructure wait --for condition=available --timeout=90s deploy -lapp.kubernetes.io/instance=traefik'
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:loadbalancer-fix:
    desc: Install traefik into your cluster
    aliases: [loadbalancer-fix, lb-fix]
    deps: [install:loadbalancer]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mFixing traefik deployment\\033[0;39m"
          export INGRESSENDPOINT=`kubectl get service -n infrastructure traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}'`
          kubectl patch deploy traefik -n infrastructure -p '[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--providers.kubernetesingress.ingressendpoint.ip=${INGRESSENDPOINT}"}]' --type json
        silent: true
    status:
      - 'kubectl get deployments.apps -n infrastructure traefik -o yaml | grep "providers.kubernetesingress.ingressendpoint.ip"'
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:kong:
    desc: Install kong into your cluster
    aliases: [kong, kong-lb]
    deps: [install:metallb]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling kong\\033[0;39m"
          kubectl apply -Rf {{.KUBERNETES_DIR}}/03_kong
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:monitoring:
    desc: Install Prometheus, metrics-server and kube-state-metrics into your cluster
    aliases: [monitoring, mnt]
    deps: [install:storage]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling Installing Prometheus, metrics-server and kube-state-metrics\\033[0;39m"
          kubectl apply -f {{.KUBERNETES_DIR}}/monitoring/00_metrics-server.yaml
          kubectl apply -f {{.KUBERNETES_DIR}}/monitoring/01_monitoring.yaml
          kubectl apply -Rf {{.KUBERNETES_DIR}}/monitoring/02_kube-state-metrics
          kubectl apply -f {{.KUBERNETES_DIR}}/monitoring/02_monitoring_prometheus_alertmanager.yaml
        silent: true
    status:
      - 'kubectl -n kube-system wait --for condition=available --timeout=90s deploy metrics-server'
      - 'kubectl -n monitoring wait --for condition=available --timeout=90s deploy -lapp.kubernetes.io/name=prometheus-operator'
      - 'kubectl -n monitoring wait --for condition=available --timeout=90s deploy -lapp.kubernetes.io/name=kube-state-metrics'
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:external-secrets:
    desc: Install External Secrets operator into your cluster
    aliases: [external-secrets, es]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling External Secrets operator\\033[0;39m"
          kubectl apply -f {{.KUBERNETES_DIR}}/10_external-secrets.yml
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:cockroach:
    desc: Install cockroachDB into your cluster
    aliases: [cockroach]
    deps: [install:storage]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling cockroach\\033[0;39m"
          kubectl -n cockroach-operator-system apply -f https://raw.githubusercontent.com/cockroachdb/cockroach-operator/v2.10.0/install/crds.yaml
          kubectl -n cockroach-operator-system apply -f https://raw.githubusercontent.com/cockroachdb/cockroach-operator/v2.10.0/install/operator.yaml
          kubectl -n cockroach-operator-system wait --for condition=available --timeout=90s deploy -lapp=cockroach-operator ; $(shell sleep 5)
          kubectl -n infrastructure apply -f {{.KUBERNETES_DIR}}/99_cockroach.yaml
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:redis:
    desc: Install redis into your cluster
    aliases: [redis]
    deps: [install:storage]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling redis\\033[0;39m"
          kubectl -n infrastructure apply -f {{.KUBERNETES_DIR}}/04_redis.yml
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:redis-cluster:
    desc: Install redis-cluster into your cluster
    aliases: [redis-cluster]
    deps: [install:storage]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling redis (you might have to run this twice)\\033[0;39m"
          kubectl -n infrastructure apply -f {{.KUBERNETES_DIR}}/04_full-redis-cluster.yml
          kubectl -n infrastructure wait --for=jsonpath='{.status.availableReplicas}'=6 --timeout=120s statefulset.apps/redis-cluster
          echo -e "\033[1;32mChecking redis (you might have to run this twice)\033[0;39m"
          echo -e "\033[1;33mError 99 is that Redis cluster is up and running\033[0;39m"
          test "$(kubectl -n infrastructure exec -it redis-cluster-0 --container redis -- redis-cli cluster info|grep cluster_state:|cut -d ":" -f 2 |tr -d "\r")" = "ok" &&  exit 99 || exit 0
          echo "yes" | kubectl -n infrastructure exec -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl -n infrastructure get pods -l app=redis-cluster -o jsonpath='{range.items[*]}{.status.podIP}:6379 {end}')
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:postgres:
    desc: Install postgres into your cluster
    aliases: [postgres]
    deps: [install:storage]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling postgres\\033[0;39m"
          export MASTER_PASSWORD := $(shell < /dev/urandom tr -dc A-Za-z0-9\- | head -c18; echo)
          export REPLICA_PASSWORD := $(shell < /dev/urandom tr -dc A-Za-z0-9\- | head -c18; echo)
          kubectl -n infrastructure get secrets postgres > /dev/null 2>&1 || envsubst < {{.KUBERNETES_DIR}}/00_postgres/00_secret.tmpl | kubectl -n infrastructure apply -f -
          kubectl -n infrastructure get configmaps postgres > /dev/null 2>&1 || kubectl -n infrastructure create configmap postgres --from-file={{.KUBERNETES_DIR}}/00_postgres/config/postgres.conf --from-file={{.KUBERNETES_DIR}}/00_postgres/config/master.conf --from-file={{.KUBERNETES_DIR}}/00_postgres/config/replica.conf --from-file={{.KUBERNETES_DIR}}/00_postgres/config/pg_hba.conf --from-file={{.KUBERNETES_DIR}}/00_postgres/config/create-replica-user.sh
          kubectl -n infrastructure apply -f {{.KUBERNETES_DIR}}/00_postgres/00_config.yml -f {{.KUBERNETES_DIR}}/00_postgres/00_master-statefulset.yml -f {{.KUBERNETES_DIR}}/00_postgres/01_service-statefulset.yml
          kubectl -n infrastructure wait --for=jsonpath='{.status.readyReplicas}'=1 --timeout=120s statefulsets.apps/postgres
          kubectl -n infrastructure apply -f {{.KUBERNETES_DIR}}/00_postgres
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:mongodb:
    desc: Install mongodb into your cluster
    aliases: [mongodb]
    deps: [install:storage]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling mongodb\\033[0;39m"
          kubectl -n infrastructure apply -f {{.KUBERNETES_DIR}}/05_mongodb
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:minio:
    desc: Install minio into your cluster
    aliases: [minio]
    deps: [install:storage]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling minio\\033[0;39m"
          kubectl -n infrastructure apply -f {{.KUBERNETES_DIR}}/09_minio
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:nats:
    desc: Install nats into your cluster
    aliases: [nats]
    deps: [install:storage]
    cmds:
      - cmd: |
          echo -e "\\033[1;32mInstalling Nats\\033[0;39m"
          kubectl -n infrastructure apply -f {{.KUBERNETES_DIR}}/01_nats
        silent: true
    preconditions:
      - sh: 'k3d cluster list --no-headers | grep ${CLUSTER_NAME} > /dev/null 2>&1'

  install:flux:
    desc: Install Flux into your cluster
    cmds:
      - kubectl apply --kustomize {{.KUBERNETES_DIR}}/bootstrap
      - cat {{.SOPS_AGE_KEY_FILE}} | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin || true
      - sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml | kubectl apply -f -
      - kubectl apply -f {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      # - kubectl apply --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: |
          Age key file is not found. Did you forget to create it?
    vars:
      SOPS_AGE_KEY_FILE: "{{.ROOT_DIR}}/age.key"
    status:
      - 'kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/helm-controller'
      - 'kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/image-automation-controller'
      - 'kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/image-reflector-controller'
      - 'kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/kustomize-controller'
      - 'kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/notification-controller'
      - 'kubectl -n flux-system wait --for condition=available --timeout=90s deployment.apps/source-controller'

  resources:
    desc: Gather common resources in your cluster, useful when asking for support
    aliases: [r, all]
    deps: [create]
    cmds:
      - task: install:storage
      - task: install:monitoring
      - task: install:loadbalancer-fix
      - task: install:cert-manager
      - task: install:flux
      # - task: install:kube-vip
      - cmd: |
          echo -e "\\033[1;32mCleanning cluster ${CLUSTER_NAME} events\\033[0;39m"
          kubectl  delete events --all --all-namespaces
        silent: true
